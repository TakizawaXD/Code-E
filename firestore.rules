/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data. Access is restricted to the owner for write operations. Read operations are public.
 * - /lessons/{lessonId}/comments:  All users can read comments. Authenticated users can create, update, and delete their own comments.
 *
 * Key Security Decisions:
 * - Users can only create their own profile.
 * - Users can update their profile.
 * - Users can not delete their profile.
 * - Listing user profiles is disallowed to prevent data scraping.
 * - Public read access is granted for lessons and their comments.
 *
 * Denormalization for Authorization:
 * N/A - User ownership is based on the `userId` in the path.
 *
 * Structural Segregation:
 * N/A - No separation of public/private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the user is signed in
     */
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Defines if the user is the owner of the resource
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines if the user is the owner of the resource and the resource exists
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User profiles stored by user ID.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile document at /users/anotherUser.
     * @allow (get) Any user can read any user profile.
     * @deny (list) No one can list all user profiles.
     * @principle Enforces user-ownership for writes. Public read access.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to lessons and authenticated users to manage comments within lessons.
     * @path /lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) Any user can read comments under any lesson.
     * @allow (create) Authenticated user can create a comment.
     * @allow (update, delete) Authenticated user can update or delete their own comment.
     * @deny (update, delete) Authenticated user can not update or delete others comments.
     * @principle Public read, owner-only writes for comments.
     */
    match /lessons/{lessonId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId && resource != null;
    }
  }
}