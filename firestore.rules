/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Users can only create their own profile, with validation ensuring the userId in the path matches their authentication UID.
 * - Users can only update their own profile.
 * - Listing of all user profiles is disallowed for privacy reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update) Authenticated user with matching userId.
     * @deny (get, create, update) Authenticated user with non-matching userId.
     * @deny delete operations.
     * @principle Enforces document ownership; users can only manage their own profile data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read a user document, but only if it exists.
      allow get: if true;

      // Disallow listing all user documents.
      allow list: if false;

      // Only allow creating a user document if the authenticated user's ID matches the document ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string;

      // Only allow updating a user document if the authenticated user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // No user is allowed to delete a profile
      allow delete: if false;
    }

    /**
     * @description Placeholder for future rules on lessons and comments.  Access to comments is being denied.
     * @path /lessons/{lessonId}/comments/{commentId}
     * @allow No operations are currently allowed.
     * @deny All operations are denied.
     */
    match /lessons/{lessonId}/comments/{commentId} {
      // Deny all operations
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }
}