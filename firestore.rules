/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allowing read-only access to profiles by anyone but restricting
 *              creation, modification, and deletion to the user themselves.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profile documents.
 * - Listing all users is not allowed to prevent data scraping.
 * - The 'createdAt' field is required and must be set on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create) A user can read and create their own profile.
     * @deny (update, delete) A user cannot modify or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allows anyone to read a user profile.
      allow get: if true;

      // Denies listing all user profiles.
      allow list: if false;

      // Allows a user to create their own profile, enforcing that the userId in the path matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allows a user to update their own profile, enforcing that the userId in the path matches the authenticated user's ID.
      allow update: if isSignedIn() && isOwner(userId);

      // Allows a user to delete their own profile, enforcing that the user is the owner of the document.
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to the 'comunicacion' collection.
     * @path /databases/{database}/documents/comunicacion
     * @allow (get, list) Anyone can read documents in the 'comunicacion' collection.
     * @deny (create, update, delete) Only authenticated users should be able to create, update, or delete documents in the 'comunicacion' collection.
     * @principle Provides public read access with restricted write access.
     */
    match /comunicacion/{comunicacionId} {
      // Allows anyone to read documents in the 'comunicacion' collection.
      allow get, list: if true;

      // Allows creating documents in the 'comunicacion' collection.
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.

      // Allows updating documents in the 'comunicacion' collection.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.

      // Allows deleting documents in the 'comunicacion' collection.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}