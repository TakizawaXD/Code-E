/**
 * @description This ruleset enforces a strict user-ownership model for private data and allows public read access for certain collections.
 * All write operations are restricted to authorized users. Data validation is relaxed in this prototyping phase.
 * @dataStructure
 * - `/learningPaths/{learningPathId}`: Public learning path data.
 * - `/courses/{courseId}`: Public course data with nested modules and lessons.
 * - `/users/{userId}`: User profiles with private subcollections (progress, notifications, etc.).
 * - `/forumThreads/{threadId}`: Public forum threads with nested posts.
 * - `/channels/{channelId}/messages/{messageId}`: Messages inside the channels
 * @keySecurityDecisions
 * - Users can only manage their own data under `/users/{userId}`.
 * - Public read access is granted to `/learningPaths`, `/courses`, `/forumThreads` to allow listing.
 * - Data validation is minimal, focusing on ownership and relational integrity.
 * - Listing of user-specific subcollections is allowed only for the owner.
 * @denormalizationForAuthorization None
 * @structuralSegregation Private user data is stored under `/users/{userId}` while public data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read learning paths, but only allows admins to create, update, or delete them.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list): Any user can read learning paths.
     * @deny (create, update, delete): Non-admin users cannot modify learning paths.
     * @principle Public read, admin-only write.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read courses and their modules/lessons, but restricts creation, updating, and deletion.
     * @path /courses/{courseId}
     * @allow (get, list): Any user can read courses.
     * @deny (create, update, delete): No one can create, update, or delete courses in this prototype.
     * @principle Public read, restricted write.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

      /**
       * @description Allows anyone to read course modules, but restricts creation, updating, and deletion.
       * @path /courses/{courseId}/modules/{moduleId}
       * @allow (get, list): Any user can read course modules.
       * @deny (create, update, delete): No one can create, update, or delete course modules in this prototype.
       * @principle Public read, restricted write.
       */
      match /modules/{moduleId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

        /**
         * @description Allows anyone to read lessons, but restricts creation, updating, and deletion.
         * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
         * @allow (get, list): Any user can read lessons.
         * @deny (create, update, delete): No one can create, update, or delete lessons in this prototype.
         * @principle Public read, restricted write.
         */
        match /lessons/{lessonId} {
          allow get, list: if true;
          allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

            /**
             * @description Allows anyone to read lesson comments, but restricts creation, updating, and deletion.
             * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
             * @allow (get, list): Any user can read comments.
             * @deny (create, update, delete): No one can create, update, or delete comments in this prototype.
             * @principle Public read, restricted write.
             */
            match /comments/{commentId} {
              allow get, list: if true;
              allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
            }
        }
      }
    }

    /**
     * @description Enforces strict user ownership for user profiles and their subcollections.
     * @path /users/{userId}
     * @allow (create): User can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete): User can only access or modify their own profile.
     * @deny (create): User cannot create a profile with a mismatched userId.
     * @deny (get, update, delete): User cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;

      /**
       * @description Enforces user ownership for progress documents within a user's profile.
       * @path /users/{userId}/progress/{progressId}
       * @allow (get, list, create): User can access and create their own progress documents.
       * @allow (update, delete): User can only modify or delete their own existing progress documents.
       * @deny (create, get, list, update, delete): Other users cannot access or modify this user's progress.
       * @principle Enforces document ownership for writes.
       */
      match /progress/{progressId} {
        allow create: if isOwner(userId);
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Enforces user ownership for notification documents within a user's profile.
       * @path /users/{userId}/notifications/{notificationId}
       * @allow (get, list, create): User can access and create their own notification documents.
       * @allow (update, delete): User can only modify or delete their own existing notification documents.
       * @deny (create, get, list, update, delete): Other users cannot access or modify this user's notifications.
       * @principle Enforces document ownership for writes.
       */
      match /notifications/{notificationId} {
        allow create: if isOwner(userId);
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Enforces user ownership for gamification stats within a user's profile.
       * @path /users/{userId}/gamification/{statsId}
       * @allow (get, list, create): User can access and create their own gamification stats documents.
       * @allow (update, delete): User can only modify or delete their own existing gamification stats documents.
       * @deny (create, get, list, update, delete): Other users cannot access or modify this user's gamification stats.
       * @principle Enforces document ownership for writes.
       */
      match /gamification/{statsId} {
        allow create: if isOwner(userId);
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Enforces user ownership for badges within a user's profile.
       * @path /users/{userId}/badges/{userBadgeId}
       * @allow (get, list, create): User can access and create their own badge documents.
       * @allow (update, delete): User can only modify or delete their own existing badge documents.
       * @deny (create, get, list, update, delete): Other users cannot access or modify this user's badges.
       * @principle Enforces document ownership for writes.
       */
      match /badges/{userBadgeId} {
        allow create: if isOwner(userId);
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Allows public read access to badges, but restricts creation, updating, and deletion.
     * @path /badges/{badgeId}
     * @allow (get, list): Any user can read badges.
     * @deny (create, update, delete): No one can create, update, or delete badges in this prototype.
     * @principle Public read, restricted write.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read forum threads and their posts, but restricts creation, updating, and deletion.
     * @path /forumThreads/{threadId}
     * @allow (get, list): Any user can read forum threads.
     * @deny (create, update, delete): No one can create, update, or delete forum threads in this prototype.
     * @principle Public read, restricted write.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

      /**
       * @description Allows anyone to read forum posts, but restricts creation, updating, and deletion.
       * @path /forumThreads/{threadId}/posts/{postId}
       * @allow (get, list): Any user can read forum posts.
       * @deny (create, update, delete): No one can create, update, or delete forum posts in this prototype.
       * @principle Public read, restricted write.
       */
      match /posts/{postId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      }
    }

    /**
     * @description Allows anyone to read messages, but restricts creation, updating, and deletion.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (get, list): Any user can read messages.
     * @deny (create, update, delete): No one can create, update, or delete messages in this prototype.
     */
    match /channels/{channelId}/messages/{messageId} {
        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}