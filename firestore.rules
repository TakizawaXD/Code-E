/**
 * @fileoverview Firestore Security Rules for Code-E Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Each user can only create, read, update, and delete their own profile data.
 *
 * Data Structure:
 * User profiles are stored in the `/users/{userId}` collection, where `{userId}` corresponds to the Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - User listing is allowed to display user profiles.
 * - Schema validation is relaxed to allow rapid iteration during the prototyping phase.
 *
 * Denormalization for Authorization:
 * The user ID is embedded in the document path (`/users/{userId}`) and compared against `request.auth.uid` to ensure ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     *   - Auth: { uid: 'user123' }
     *   - Data: { name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z', id: 'user123' }
     * @allow (get, list) Any user can read/list any user profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     *   - Auth: { uid: 'user123' }
     *   - Existing Data: { name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z', id: 'user123' }
     *   - New Data: { name: 'John Doe Jr.' }
     * @allow (delete) User with UID 'user123' deletes their own profile.
     *   - Auth: { uid: 'user123' }
     * @deny (create) User with UID 'user456' attempts to create a profile for 'user123'.
     *   - Auth: { uid: 'user456' }
     *   - Data: { name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z', id: 'user123' }
     * @deny (update) User with UID 'user456' attempts to update profile 'user123'.
     *   - Auth: { uid: 'user456' }
     *   - Existing Data: { name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z', id: 'user123' }
     *   - New Data: { name: 'John Doe Jr.' }
     * @deny (delete) User with UID 'user456' attempts to delete profile 'user123'.
     *   - Auth: { uid: 'user456' }
     * @principle Enforces document ownership, allows public read, and validates the user ID on create.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}