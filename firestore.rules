/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows the owner to read and write the enrolled courses for the user.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /users/{userId}/enrolledCourses/{courseId}: stores course ids enrolled for the user.
 *
 * Key Security Decisions:
 * - User profiles are readable by anyone, but only the owner can create, update, or delete their profile.
 * - Enrolled courses are only readable and writable by the owner.
 * - Listing of enrolled courses is allowed only for the owner.
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced by matching the {userId} path segment with the `request.auth.uid`.
 *
 * Structural Segregation:
 * - There are no private and public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read user profiles, but only the owner can create, update, or delete their profile.
     * @path /users/{userId}
     * @allow (get, list): Anyone can read user profiles.
     * @allow (create): User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (update, delete): User 'user_abc' can update/delete their profile if request.auth.uid == 'user_abc' and the document exists.
     * @deny (create, update, delete): User 'user_xyz' cannot create/update/delete profile 'user_abc'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner of the user profile to read and list their enrolled courses.
     * @path /users/{userId}/enrolledCourses/{courseId}
     * @allow (get, list): User 'user_abc' can read/list their enrolled courses if request.auth.uid == 'user_abc'.
     * @allow (create, update, delete): User 'user_abc' can create/update/delete enrolled courses if request.auth.uid == 'user_abc'.
     * @deny (get, list, create, update, delete): User 'user_xyz' cannot read/write 'user_abc' enrolled courses.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/enrolledCourses/{courseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}