/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access to course catalogs.
 *
 * Data Structure:
 * - User-specific data (profiles, progress, certificates, payments, exam answers) is nested under /users/{userId}.
 * - Courses, learning paths, lessons, comments, and exercises are organized hierarchically under /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}.
 * - Exams and ExamQuestions are organized under /courses/{courseId}/exams/{examId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication.
 * - Data consistency is enforced between document IDs and path parameters for user-owned data.
 * - Read access to courses, learning paths, and lessons is public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get) - User 'tzLNkvVUB8cYipm5o3Q5WYvjDXh2' can create/update/delete/get their own profile at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2.
     * @deny (create, update, delete, get) - User 'otherUserId' cannot create/update/delete/get the profile at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId); // Enforce immutability of userId on update
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list) - Any user can read learning paths.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete learning paths.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /learningPaths/{learningPathId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to courses within learning paths.
     * @path /learningPaths/{learningPathId}/courses/{courseId}
     * @allow (get, list) - Any user can read courses within learning paths.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete courses.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /learningPaths/{learningPathId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to lessons within courses.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}
     * @allow (get, list) - Any user can read lessons within courses.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete lessons.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access and restricts write access for comments on lessons to authenticated users.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) - Any user can read comments on lessons.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete comments.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access and restricts write access for exercises related to lessons to authenticated users.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId}
     * @allow (get, list) - Any user can read exercises related to lessons.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete exercises.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Protects user progress data. Only the authenticated user can read and write their own progress data.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create, update, delete, get) - User 'tzLNkvVUB8cYipm5o3Q5WYvjDXh2' can create/update/delete/get their own progress at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/progress/{progressId}.
     * @deny (create, update, delete, get) - User 'otherUserId' cannot create/update/delete/get the progress at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/progress/{progressId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/{progressId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects user certificates. Only the authenticated user can read and write their own certificates.
     * @path /users/{userId}/certificates/{certificateId}
     * @allow (create, update, delete, get) - User 'tzLNkvVUB8cYipm5o3Q5WYvjDXh2' can create/update/delete/get their own certificate at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/certificates/{certificateId}.
     * @deny (create, update, delete, get) - User 'otherUserId' cannot create/update/delete/get the certificate at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/certificates/{certificateId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/certificates/{certificateId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects user payment information. Only the authenticated user can read and write their own payment information.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create, update, delete, get) - User 'tzLNkvVUB8cYipm5o3Q5WYvjDXh2' can create/update/delete/get their own payment information at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/payments/{paymentId}.
     * @deny (create, update, delete, get) - User 'otherUserId' cannot create/update/delete/get the payment information at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/payments/{paymentId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/payments/{paymentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to exams within courses and restricts write access to authenticated users.
     * @path /courses/{courseId}/exams/{examId}
     * @allow (get, list) - Any user can read exams within courses.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete exams.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /courses/{courseId}/exams/{examId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to exam questions and restricts write access to authenticated users.
     * @path /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId}
     * @allow (get, list) - Any user can read exam questions.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete exam questions.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Protects user exam answers. Only the authenticated user can read and write their own exam answers.
     * @path /users/{userId}/userExamAnswers/{userExamAnswerId}
     * @allow (create, update, delete, get) - User 'tzLNkvVUB8cYipm5o3Q5WYvjDXh2' can create/update/delete/get their own exam answers at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/userExamAnswers/{userExamAnswerId}.
     * @deny (create, update, delete, get) - User 'otherUserId' cannot create/update/delete/get the exam answers at /users/tzLNkvVUB8cYipm5o3Q5WYvjDXh2/userExamAnswers/{userExamAnswerId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userExamAnswers/{userExamAnswerId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}