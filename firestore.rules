/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles. Each user can only read and write their own profile.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Data structure adheres to a owner-centric security model.
 *
 * Denormalization for Authorization:
 * - User profiles are stored under `/users/{userId}`, and the rules enforce that the `userId` in the path must match the authenticated user's UID. This avoids needing to store the UID within the profile data itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Each user can only read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can create their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2 if request.auth.uid == userId
     * @allow (get) - User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can read their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (update) - User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can update their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (delete) - User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can delete their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (create) - User 'someOtherUserId' cannot create a profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (get) - User 'someOtherUserId' cannot read the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (update) - User 'someOtherUserId' cannot update the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (delete) - User 'someOtherUserId' cannot delete the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @principle Enforces user-ownership; only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description  Placeholder for comments. Public read is allowed
     * @path /databases/{database}/documents/comments
     * @allow (list) Authenticated User can list all the comments
     * @allow (get) Authenticated User can get all the comments
     * @deny (create) Any operation is denied
     * @deny (update) Any operation is denied
     * @deny (delete) Any operation is denied
     *
     */
    match /comments/{document} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}