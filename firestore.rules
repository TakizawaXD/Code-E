/**
 * @fileoverview Firestore Security Rules for Code-E platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model where users can only
 * read and write their own data, with specific exceptions for public
 * profiles and certain collections. The rules are designed to be
 * highly secure from an authorization standpoint while allowing for
 * flexible data shapes to facilitate rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information.
 * - `/users/{userId}/notifications`: Stores private notifications for each user.
 *
 * Key Security Decisions:
 * - Users can only list their own notifications.
 * - Users can only create their profile with a matching `userId`.
 * - Users can only update their profile.
 *
 * Denormalization for Authorization:
 *   No denormalization is needed as the authorization checks are based
 *   on the `userId` in the path.
 *
 * Structural Segregation:
 *   User profiles are stored in a top-level collection (`/users/{userId}`)
 *   for public access, while private user data (e.g., notifications) is
 *   stored in user subcollections (`/users/{userId}/notifications`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID "user123" can create a profile at /users/user123. The profile data must also contain `id: "user123"`.
     * @deny (create) User with UID "user456" cannot create a profile at /users/user123.
     * @allow (get) Any user can read a user profile.
     * @allow (update) User with UID "user123" can update their profile at /users/user123.
     * @deny (update) User with UID "user456" cannot update the profile at /users/user123.
     * @allow (delete) User with UID "user123" can delete their profile at /users/user123.
     * @deny (delete) User with UID "user456" cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (list) User with UID "user123" can list notifications at /users/user123/notifications.
     * @deny (list) User with UID "user456" cannot list notifications at /users/user123/notifications.
     * @allow (create) User with UID "user123" can create a notification at /users/user123/notifications/notification1.
     * @deny (create) User with UID "user456" cannot create a notification at /users/user123/notifications/notification1.
     * @allow (get) User with UID "user123" can get a notification at /users/user123/notifications/notification1.
     * @deny (get) User with UID "user456" cannot get a notification at /users/user123/notifications/notification1.
     * @allow (update) User with UID "user123" can update a notification at /users/user123/notifications/notification1.
     * @deny (update) User with UID "user456" cannot update a notification at /users/user123/notifications/notification1.
     * @allow (delete) User with UID "user123" can delete a notification at /users/user123/notifications/notification1.
     * @deny (delete) User with UID "user456" cannot delete a notification at /users/user123/notifications/notification1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}