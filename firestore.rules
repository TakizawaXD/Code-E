/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and allows public read access to learning paths and courses.
 *
 * Data Structure:
 *  - /users/{userId}: Stores user profiles, accessible only to the authenticated user with matching UID.
 *  - /learningPaths/{learningPathId}: Stores publicly readable learning paths.
 *  - /learningPaths/{learningPathId}/courses/{courseId}: Stores publicly readable courses.
 *  - /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}: Stores publicly readable lessons.
 *  - /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId}: Stores comments on lessons.
 *  - /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId}: Stores exercises related to lessons.
 *  - /users/{userId}/progress/{progressId}: Stores user-specific course progress, accessible only to the authenticated user.
 *  - /users/{userId}/certificates/{certificateId}: Stores user certificates, accessible only to the authenticated user.
 *  - /users/{userId}/payments/{paymentId}: Stores user payment information, accessible only to the authenticated user.
 *  - /courses/{courseId}/exams/{examId}: Stores exams for each course.
 *  - /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId}: Stores questions within each exam.
 *  - /users/{userId}/userExamAnswers/{userExamAnswerId}: Stores the answers provided by a user for an exam question.
 *
 * Key Security Decisions:
 *  - User data is strictly controlled by the user's authentication ID.
 *  - Learning path and course data is publicly readable.
 *  - Listing of user subcollections (progress, certificates, payments, userExamAnswers) is allowed only for the owner.
 *
 * Denormalization for Authorization:
 *  - The data structure uses path-based ownership (e.g., /users/{userId}/...) to avoid the need for `get()` calls in security rules. The userId is also duplicated inside the document and checked against the path.
 *
 * Structural Segregation:
 *  - Public course and learning path data is stored in top-level collections, separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, update, delete) request.auth.uid == userId && resource != null
     * @deny (create) request.auth == null
     * @deny (get, update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows public read access to learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to courses within learning paths.
     * @path /learningPaths/{learningPathId}/courses/{courseId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /learningPaths/{learningPathId}/courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows public read access to lessons within courses.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

            /**
     * @description Allows public read access to comments within lessons.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

                /**
     * @description Allows public read access to exercises within lessons.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own course progress.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId && resource != null
     * @deny (create) request.auth == null
     * @deny (get, list, update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId}/progress/{progressId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows a user to read and write their own certificates.
     * @path /users/{userId}/certificates/{certificateId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId && resource != null
     * @deny (create) request.auth == null
     * @deny (get, list, update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId}/certificates/{certificateId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows a user to read and write their own payment information.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId && resource != null
     * @deny (create) request.auth == null
     * @deny (get, list, update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId}/payments/{paymentId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

        /**
     * @description Allows public read access to exams within courses.
     * @path /courses/{courseId}/exams/{examId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /courses/{courseId}/exams/{examId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

            /**
     * @description Allows public read access to exam questions within exams.
     * @path /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId}
     * @allow (get, list) true
     * @deny (create, update, delete) false
     * @principle Allows public read access while restricting writes.
     */
    match /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user exam answers.
     * @path /users/{userId}/userExamAnswers/{userExamAnswerId}
     * @allow (create) request.auth.uid == userId
     * @allow (get, list, update, delete) request.auth.uid == userId && resource != null
     * @deny (create) request.auth == null
     * @deny (get, list, update, delete) request.auth == null || request.auth.uid != userId
     * @principle Enforces document ownership for writes, requires authentication for reads.
     */
    match /users/{userId}/userExamAnswers/{userExamAnswerId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }
  }
}