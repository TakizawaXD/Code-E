/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data. Each user can only read and write their own profile.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles. Listing all users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description User profiles are stored under /users/{userId}.
     * @path /users/{userId}
     * @allow (get) Signed-in user with matching {userId} can retrieve their profile.
     * @allow (create) Signed-in user with matching {userId} can create their profile.
     * @allow (update) Signed-in user with matching {userId} can update their profile.
     * @allow (delete) Signed-in user with matching {userId} can delete their profile.
     * @deny (get) Signed-in user tries to read another user's profile.
     * @deny (list) Any user attempts to list all user profiles (listing is not allowed).
     * @deny (create) Signed-in user tries to create a profile with a mismatched {userId}.
     * @deny (update) Signed-in user tries to update another user's profile.
     * @deny (delete) Signed-in user tries to delete another user's profile.
     * @principle Enforces document ownership for writes.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Comments are stored under /comments.
     * @path /comments
     * @allow (list) Any user can list the comments
     */
    match /comments/{commentId} {
        allow list: if true;
        allow get: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}