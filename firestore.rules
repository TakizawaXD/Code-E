/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Each user can only create their own profile and no one else can modify it.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile data for each user.
 *
 * Key Security Decisions:
 * - Users can only create their profile if request.auth.uid matches the {userId}
 * - Users can only update their profile if request.auth.uid matches the {userId}
 * - Users can not list all users.
 * - No schema validation is performed in this prototype beyond ownership constraints.
 *
 * Denormalization for Authorization:
 *  N/A - The /users/{userId} path inherently links the document to the user's UID, avoiding the need for denormalized owner fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can create, read, update or delete their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates a profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' reads their profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' updates their profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' deletes their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' attempts to create a profile at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' attempts to update the profile at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' attempts to delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by an existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}