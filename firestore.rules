rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the authenticated user ID matches the provided user ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the authenticated user is the owner of the existing document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null && resource.data.userId == request.auth.uid;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creating their own profile.
     * @allow (get) - Authenticated user reading their own profile.
     * @allow (update) - Authenticated user updating their own profile.
     * @allow (delete) - Authenticated user deleting their own profile.
     * @deny (create) - Authenticated user creating a profile for another user.
     * @deny (get) - Authenticated user reading another user's profile.
     * @deny (update) - Authenticated user updating another user's profile.
     * @deny (delete) - Authenticated user deleting another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list) - Anyone can read learning paths.
     * @deny (create, update, delete) - No one can create, update, or delete learning paths.
     * @principle Public read-only access.
     */
    match /learningPaths/{learningPathId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for courses within learning paths.
     * @path /learningPaths/{learningPathId}/courses/{courseId}
     * @allow (get, list) - Anyone can read courses.
     * @deny (create, update, delete) - No one can create, update, or delete courses.
     * @principle Public read-only access.
     */
    match /learningPaths/{learningPathId}/courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for lessons within courses.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}
     * @allow (get, list) - Anyone can read lessons.
     * @deny (create, update, delete) - No one can create, update, or delete lessons.
     * @principle Public read-only access.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for comments on lessons.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) - Anyone can read comments.
     * @deny (create, update, delete) - No one can create, update, or delete comments.
     * @principle Public read-only access.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for exercises related to lessons.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId}
     * @allow (get, list) - Anyone can read exercises.
     * @deny (create, update, delete) - No one can create, update, or delete exercises.
     * @principle Public read-only access.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for user progress in courses.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) - Authenticated user creating their own progress record.
     * @allow (get) - Authenticated user reading their own progress record.
     * @allow (update) - Authenticated user updating their own progress record.
     * @allow (delete) - Authenticated user deleting their own progress record.
     * @deny (create) - Authenticated user creating a progress record for another user.
     * @deny (get) - Authenticated user reading another user's progress record.
     * @deny (update) - Authenticated user updating another user's progress record.
     * @deny (delete) - Authenticated user deleting another user's progress record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/progress/{progressId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for certificates earned by users.
     * @path /users/{userId}/certificates/{certificateId}
     * @allow (create) - Authenticated user creating their own certificate record.
     * @allow (get) - Authenticated user reading their own certificate record.
     * @allow (update) - Authenticated user updating their own certificate record.
     * @allow (delete) - Authenticated user deleting their own certificate record.
     * @deny (create) - Authenticated user creating a certificate record for another user.
     * @deny (get) - Authenticated user reading another user's certificate record.
     * @deny (update) - Authenticated user updating another user's certificate record.
     * @deny (delete) - Authenticated user deleting another user's certificate record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/certificates/{certificateId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for payments made by users.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create) - Authenticated user creating their own payment record.
     * @allow (get) - Authenticated user reading their own payment record.
     * @allow (update) - Authenticated user updating their own payment record.
     * @allow (delete) - Authenticated user deleting their own payment record.
     * @deny (create) - Authenticated user creating a payment record for another user.
     * @deny (get) - Authenticated user reading another user's payment record.
     * @deny (update) - Authenticated user updating another user's payment record.
     * @deny (delete) - Authenticated user deleting another user's payment record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for exams for courses.
     * @path /courses/{courseId}/exams/{examId}
     * @allow (get, list) - Anyone can read exams.
     * @deny (create, update, delete) - No one can create, update, or delete exams.
     * @principle Public read-only access.
     */
     match /courses/{courseId}/exams/{examId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

    /**
     * @description Rules for questions within each exam.
     * @path /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId}
     * @allow (get, list) - Anyone can read exam questions.
     * @deny (create, update, delete) - No one can create, update, or delete exam questions.
     * @principle Public read-only access.
     */
     match /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

    /**
     * @description Rules for the answers provided by a user for an exam question.
     * @path /users/{userId}/userExamAnswers/{userExamAnswerId}
     * @allow (create) - Authenticated user creating their own exam answer record.
     * @allow (get) - Authenticated user reading their own exam answer record.
     * @allow (update) - Authenticated user updating their own exam answer record.
     * @allow (delete) - Authenticated user deleting their own exam answer record.
     * @deny (create) - Authenticated user creating an exam answer record for another user.
     * @deny (get) - Authenticated user reading another user's exam answer record.
     * @deny (update) - Authenticated user updating another user's exam answer record.
     * @deny (delete) - Authenticated user deleting another user's exam answer record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userExamAnswers/{userExamAnswerId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}