/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles.
 * All data is stored under `/users/{userId}`, and each user can only read and write their own profile data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Users can only create their own profile if the authenticated user ID matches the userId.
 * - User listing is disallowed for privacy.
 * - No public data is stored in this configuration.
 *
 * Data Structure:
 * - /users/{userId} : UserProfile documents
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can create their own profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2 if the request.auth.uid matches the document id.
     * @allow (get) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can read their own profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (update) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can update their own profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (delete) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can delete their own profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (create) User 'someOtherUserId' cannot create a profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (get) User 'someOtherUserId' cannot read profile /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (update) User 'someOtherUserId' cannot update profile /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (delete) User 'someOtherUserId' cannot delete profile /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Default deny for all other paths.
     */
    match /{path=**} {
      allow read, write: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}