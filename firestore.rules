/**
 * @fileoverview Firestore Security Rules for Code-E platform.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public read access for some content
 * with strict ownership and role-based access control for user-specific data and administrative functions.
 *
 * Data Structure:
 * - Top-level collections like /courses and /learningPaths are generally readable by anyone.
 * - User-specific data (progress, notifications, badges) is nested under /users/{userId} and secured via ownership checks.
 * - Forum discussions are publicly readable but writable only by authenticated users, with potential future moderation roles.
 *
 * Key Security Decisions:
 * - Listing all users is explicitly denied to protect user privacy.
 * - Public read access is granted to courses and learning paths to facilitate discovery.
 * - A 'channels' collection and subcollections were requested but are not defined in the schema. Rules will be generated but require review.
 * - Writes to /users/{userId} and subcollections will be strictly limited to the authenticated user.
 *
 * Denormalization for Authorization:
 *  To avoid expensive `get()` operations in security rules, critical authorization data (such as ownership)
 *  should be denormalized directly onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but restricts creation, updates, and deletion to authenticated users.
     * @path /courses/{courseId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // Anyone signed in can create. Review the security of this decision.
     * @allow update: if false; // TODO: Implement role-based access for course updates.
     * @allow delete: if false; // TODO: Implement role-based access for course deletion.
     * @principle Public read, restricted write.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Implement role-based access for course updates.
      allow delete: if false; // TODO: Implement role-based access for course deletion.
    }

    /**
     * @description Allows anyone to read learning paths, but restricts creation, updates, and deletion to authenticated users.
     * @path /learningPaths/{learningPathId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // Anyone signed in can create. Review the security of this decision.
     * @allow update: if false; // TODO: Implement role-based access for learning path updates.
     * @allow delete: if false; // TODO: Implement role-based access for learning path deletion.
     * @principle Public read, restricted write.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Implement role-based access for learning path updates.
      allow delete: if false; // TODO: Implement role-based access for learning path deletion.
    }

    /**
     * @description Restricts access to user-specific data to the authenticated user.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false; // Explicitly deny listing all users.
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Restricts access to user progress data to the authenticated user.
       * @path /users/{userId}/progress/{progressId}
       * @allow get, list: if isOwner(userId);
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces document ownership for all operations.
       */
      match /progress/{progressId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Restricts access to user notifications to the authenticated user.
       * @path /users/{userId}/notifications/{notificationId}
       * @allow get, list: if isOwner(userId);
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces document ownership for all operations.
       */
      match /notifications/{notificationId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Restricts access to user gamification stats to the authenticated user.
       * @path /users/{userId}/gamification/{statsId}
       * @allow get, list: if isOwner(userId);
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces document ownership for all operations.
       */
      match /gamification/{statsId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Restricts access to user badges to the authenticated user.
       * @path /users/{userId}/badges/{userBadgeId}
       * @allow get, list: if isOwner(userId);
       * @allow create: if isOwner(userId);
       * @allow update: if isExistingOwner(userId);
       * @allow delete: if isExistingOwner(userId);
       * @principle Enforces document ownership for all operations.
       */
      match /badges/{userBadgeId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Allows anyone to read badges, but restricts creation, updates, and deletion to authenticated users.
     * @path /badges/{badgeId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null; // Anyone signed in can create. Review the security of this decision.
     * @allow update: if false; // TODO: Implement role-based access for badge updates.
     * @allow delete: if false; // TODO: Implement role-based access for badge deletion.
     * @principle Public read, restricted write.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Implement role-based access for badge updates.
      allow delete: if false; // TODO: Implement role-based access for badge deletion.
    }

    /**
     * @description Allows anyone to read forum threads, but restricts creation, updates, and deletion to authenticated users.
     * @path /forumThreads/{threadId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // Anyone signed in can create. Review the security of this decision.
     * @allow update: if false; // TODO: Implement role-based access for thread updates.
     * @allow delete: if false; // TODO: Implement role-based access for thread deletion.
     * @principle Public read, restricted write.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Implement role-based access for thread updates.
      allow delete: if false; // TODO: Implement role-based access for thread deletion.

      /**
       * @description Allows anyone to read forum posts, but restricts creation, updates, and deletion to authenticated users.
       * @path /forumThreads/{threadId}/posts/{postId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn(); // Anyone signed in can create. Review the security of this decision.
       * @allow update: if false; // TODO: Implement role-based access for post updates.
       * @allow delete: if false; // TODO: Implement role-based access for post deletion.
       * @principle Public read, restricted write.
       */
      match /posts/{postId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false; // TODO: Implement role-based access for post updates.
        allow delete: if false; // TODO: Implement role-based access for post deletion.
      }
    }

    /**
     * @description Rules for course modules. Read access is public, but writes are restricted.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // Anyone signed in can create. Review the security of this decision.
     * @allow update: if false; // TODO: Implement role-based access for module updates.
     * @allow delete: if false; // TODO: Implement role-based access for module deletion.
     * @principle Public read, restricted write.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Implement role-based access for module updates.
      allow delete: if false; // TODO: Implement role-based access for module deletion.

      /**
       * @description Rules for lessons. Read access is public, but writes are restricted.
       * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
       * @allow get, list: if true;
       * @allow create: if isSignedIn(); // Anyone signed in can create. Review the security of this decision.
       * @allow update: if false; // TODO: Implement role-based access for lesson updates.
       * @allow delete: if false; // TODO: Implement role-based access for lesson deletion.
       * @principle Public read, restricted write.
       */
      match /lessons/{lessonId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false; // TODO: Implement role-based access for lesson updates.
        allow delete: if false; // TODO: Implement role-based access for lesson deletion.

        /**
         * @description Rules for comments on lessons.  Read access is public, but writes are restricted.
         * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
         * @allow get, list: if true;
         * @allow create: if isSignedIn(); // Anyone signed in can create. Review the security of this decision.
         * @allow update: if false; // TODO: Implement role-based access for comment updates.
         * @allow delete: if false; // TODO: Implement role-based access for comment deletion.
         * @principle Public read, restricted write.
         */
        match /comments/{commentId} {
          allow get, list: if true;
          allow create: if isSignedIn();
          allow update: if false; // TODO: Implement role-based access for comment updates.
          allow delete: if false; // TODO: Implement role-based access for comment deletion.
        }
      }
    }

    /**
     * @description Placeholder for channels and messages. These collections are not present in the data model.  Needs review and definition.
     * @path /channels/general/messages
     * @allow get: if false;
     * @allow list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Placeholder for missing data model elements.
     */
    match /channels/general/messages/{document} {
        //TODO: Data model missing
        allow get: if false;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}