/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Users can only
 * read and write their own profile data. Global listing of users is prohibited.
 *
 * Data Structure:
 * User profiles are stored under the `/users/{userId}` path, where `{userId}` matches
 * the authenticated user's UID.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Global listing of users is denied to protect user privacy and prevent enumeration attacks.
 * - Only authenticated users can access the data.
 *
 * Denormalization for Authorization:
 *  - The `userId` is embedded in the path `/users/{userId}` and must match the
 * authenticated user's UID for write operations. This avoids costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     *    Example: auth.uid = "user123", userId = "user123"
     * @allow (create) Authenticated user can create their own profile.
     *    Example: auth.uid = "user123", userId = "user123"
     * @allow (update) Authenticated user can update their own profile.
     *    Example: auth.uid = "user123", userId = "user123"
     * @allow (delete) Authenticated user can delete their own profile.
     *    Example: auth.uid = "user123", userId = "user123"
     * @deny (get) Authenticated user cannot read another user's profile.
     *    Example: auth.uid = "user456", userId = "user123"
     * @deny (create) Authenticated user cannot create a profile with a mismatched ID.
     *    Example: auth.uid = "user456", userId = "user123"
     * @deny (update) Authenticated user cannot update another user's profile.
     *    Example: auth.uid = "user456", userId = "user123"
     * @deny (delete) Authenticated user cannot delete another user's profile.
     *    Example: auth.uid = "user456", userId = "user123"
     * @principle Enforces document ownership, preventing unauthorized access to user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string && request.resource.data.name is string && request.resource.data.username is string && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.email is string && request.resource.data.name is string && request.resource.data.username is string && request.auth.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}