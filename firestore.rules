/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for private user data and allows public read access to certain collections.
 * All write operations require authentication and proper authorization. Data schema validation is relaxed for rapid prototyping.
 *
 * @data_structure
 * - /users/{userId}: User profiles and private data.
 * - /learningPaths/{learningPathId}: Publicly readable learning paths.
 * - /courses/{courseId}: Publicly readable courses, organized into modules and lessons.
 * - /forumThreads/{threadId}: Publicly readable forum threads with nested posts.
 * - /channels/general/messages: Publicly readable messages.
 *
 * @key_security_decisions
 * - User listing is disabled to prevent information disclosure.
 * - Public read access is granted to learning paths, courses, forum threads, and channels to enable open content consumption.
 * - All write operations are restricted to authenticated users with appropriate ownership or roles.
 *
 * @denormalization_for_authorization
 *  None.
 *
 * @structural_segregation
 *  Private user data is stored under /users/{userId} to ensure clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to publicly available learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list): Anyone can read learning paths.
     * @deny (create, update, delete): No one can create, update, or delete learning paths through direct client access.
     * @principle Allows public read access while restricting write access.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to publicly available courses and restricts write operations.
     * @path /courses/{courseId}
     * @allow (get, list): Anyone can read courses.
     * @deny (create, update, delete): No one can create, update, or delete courses through direct client access.
     * @principle Allows public read access while restricting write access.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;

      /**
       * @description Allows read-only access to course modules within a specific course.
       * @path /courses/{courseId}/modules/{moduleId}
       * @allow (get, list): Anyone can read course modules.
       * @deny (create, update, delete): No one can create, update, or delete course modules through direct client access.
       * @principle Allows public read access while restricting write access.
       */
      match /modules/{moduleId} {
        allow get, list: if true;
        allow create, update, delete: if false;

        /**
         * @description Allows read-only access to lessons within a specific course module.
         * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
         * @allow (get, list): Anyone can read lessons.
         * @deny (create, update, delete): No one can create, update, or delete lessons through direct client access.
         * @principle Allows public read access while restricting write access.
         */
        match /lessons/{lessonId} {
          allow get, list: if true;
          allow create, update, delete: if false;

           /**
            * @description Allows read-only access to comments within a specific lesson.
            * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
            * @allow (get, list): Anyone can read comments.
            * @deny (create, update, delete): No one can create, update, or delete comments through direct client access.
            * @principle Allows public read access while restricting write access.
            */
          match /comments/{commentId} {
            allow get, list: if true;
            allow create, update, delete: if false;
          }
        }
      }
    }

    /**
     * @description Enforces strict ownership for user-specific data, allowing each user to only access their own data.
     * @path /users/{userId}
     * @allow (create): A user can create their own profile if the userId matches their authentication UID.
     * @allow (get, list, update, delete): A user can only read, update, or delete their own profile.
     * @deny: Any access to other users' profiles or data is denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) ;
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;

      /**
       * @description Enforces strict ownership for user progress data.
       * @path /users/{userId}/progress/{progressId}
       * @allow (get, list, create, update, delete): A user can only manage their own progress data.
       * @deny: Any access to other users' progress data is denied.
       * @principle Enforces document ownership for all operations.
       */
      match /progress/{progressId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
      }

      /**
       * @description Enforces strict ownership for user notifications.
       * @path /users/{userId}/notifications/{notificationId}
       * @allow (get, list, create, update, delete): A user can only manage their own notifications.
       * @deny: Any access to other users' notifications is denied.
       * @principle Enforces document ownership for all operations.
       */
      match /notifications/{notificationId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
      }

      /**
       * @description Enforces strict ownership for user gamification stats.
       * @path /users/{userId}/gamification/{statsId}
       * @allow (get, list, create, update, delete): A user can only manage their own gamification stats.
       * @deny: Any access to other users' gamification stats is denied.
       * @principle Enforces document ownership for all operations.
       */
      match /gamification/{statsId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
      }

       /**
        * @description Enforces strict ownership for user badges.
        * @path /users/{userId}/badges/{userBadgeId}
        * @allow (get, list, create, update, delete): A user can only manage their own badges.
        * @deny: Any access to other users' badges is denied.
        * @principle Enforces document ownership for all operations.
        */
      match /badges/{userBadgeId} {
        allow create: if isSignedIn() && isOwner(userId);
        allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
      }
    }

    /**
     * @description Allows read-only access to publicly available badges.
     * @path /badges/{badgeId}
     * @allow (get, list): Anyone can read badges.
     * @deny (create, update, delete): No one can create, update, or delete badges through direct client access.
     * @principle Allows public read access while restricting write access.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to publicly available forum threads.
     * @path /forumThreads/{threadId}
     * @allow (get, list): Anyone can read forum threads.
     * @deny (create, update, delete): No one can create, update, or delete forum threads through direct client access.
     * @principle Allows public read access while restricting write access.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create, update, delete: if false;

      /**
       * @description Allows read-only access to forum posts within a specific thread.
       * @path /forumThreads/{threadId}/posts/{postId}
       * @allow (get, list): Anyone can read forum posts.
       * @deny (create, update, delete): No one can create, update, or delete forum posts through direct client access.
       * @principle Allows public read access while restricting write access.
       */
      match /posts/{postId} {
        allow get, list: if true;
        allow create, update, delete: if false;
      }
    }

    /**
     * @description Allows read-only access to messages within the general channel.
     * @path /channels/general/messages
     * @allow (get, list): Anyone can read messages in the general channel.
     * @deny (create, update, delete): No one can create, update, or delete messages in the general channel through direct client access.
     * @principle Allows public read access while restricting write access.
     */
    match /channels/general/messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   * @example isSignedIn() == true if request.auth != null
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user ID matches the provided user ID.
   * @param {string} userId The user ID to compare against.
   * @return {boolean} True if the user is the owner, false otherwise.
   * @example isOwner('user123') == true if request.auth.uid == 'user123'
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the authenticated user is the owner of the existing document
   * @param {string} userId The user ID to compare against.
   * @return {boolean} True if the user is the owner of existing document, false otherwise.
   * @example isExistingOwner('user123') == true if request.auth.uid == 'user123' and the document exists
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}