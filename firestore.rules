/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with public read access to user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data.
 * - /users/{userId}/progress/{courseId}/lessons/{lessonId}: Stores lesson progress data, accessible only by the user.
 *
 * Key Security Decisions:
 * - Public user profile data with owner-only write access.
 * - Strict user-ownership for all subcollections under /users/{userId}.
 * - No user listing is allowed to protect privacy.
 * - All write operations must be authenticated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all user documents. Authenticated user required for creating, updating, or deleting a user.
     * @path /users/{userId}
     * @allow (get, list) - Any user can read any profile.
     * @allow (create) - Any authenticated user can create their own profile.
     * @allow (update, delete) - Only the user can update or delete their profile.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not the owner.
     * @principle Public read, owner-only write for user profiles.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to lesson progress for an authenticated user. Authenticated user required for creating, updating, or deleting lesson progress data.
     * @path /users/{userId}/progress/{courseId}/lessons/{lessonId}
     * @allow (get, list) - Only the user can read their own lesson progress.
     * @allow (create, update, delete) - Only the user can create, update, or delete their own lesson progress.
     * @deny (get, list, create, update, delete) - If the user is not the owner.
     * @principle Strict user-ownership for lesson progress data.
     */
    match /users/{userId}/progress/{courseId}/lessons/{lessonId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}