/**
 * @file Firestore Security Rules for Code-E Platform
 *
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and utilizes membership-based access control for collaborative resources like channels.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}.
 * - Collaborative data like channels and their messages uses a 'members' map for access control.
 * - Courses, LearningPaths, and Instructors are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are protected by authorization checks.
 * - Data validation is limited to critical fields for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `members` map is used within channel documents to avoid `get()` calls and enable atomic operations for collaborative access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authenticated access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the request user is the existing owner of the document.
      * @path N/A
      * @allow N/A
      * @deny N/A
      * @principle Ownership and existence check.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that a request includes a valid auth token.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Protects from unauthenticated requests.
     */
    function isAuthenticated() {
        return request.auth != null;
    }

    /**
     * @description Checks if the user is a member of the channel.
     * @path N/A
     */
    function isChannelMember(channelId) {
        return get(/databases/$(database)/documents/channels/$(channelId)).data.members[request.auth.uid] != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Unauthenticated user tries to create a profile.
     * @deny (update) - Authenticated user tries to update another user's profile.
     * @deny (delete) - Authenticated user tries to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for notifications within a user's profile.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - Authenticated user creates a notification for themselves.
     * @allow (get) - Authenticated user can read their own notifications.
     * @allow (update) - Authenticated user can update their own notifications.
     * @allow (delete) - Authenticated user can delete their own notifications.
     * @deny (create) - Authenticated user tries to create a notification for another user.
     * @deny (update) - Authenticated user tries to update another user's notification.
     * @deny (delete) - Authenticated user tries to delete another user's notification.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for subscriptions within a user's profile.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) - Authenticated user creates a subscription for themselves.
     * @allow (get) - Authenticated user can read their own subscription.
     * @allow (update) - Authenticated user can update their own subscription.
     * @allow (delete) - Authenticated user can delete their own subscription.
     * @deny (create) - Authenticated user tries to create a subscription for another user.
     * @deny (update) - Authenticated user tries to update another user's subscription.
     * @deny (delete) - Authenticated user tries to delete another user's subscription.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for courses.
     * @path /courses/{courseId}
     * @allow (get) - Anyone can read course information.
     * @allow (list) - Anyone can list courses.
     * @allow (create) - Only an instructor can create a course.
     * @allow (update) - Only the instructor who created the course can update it.
     * @allow (delete) - Only the instructor who created the course can delete it.
     * @principle Public read, owner-only writes for Courses
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add instructor validation
      allow update: if isSignedIn(); // TODO: Add instructor validation
      allow delete: if isSignedIn(); // TODO: Add instructor validation
    }

    /**
     * @description Rules for learning paths.
     * @path /learning_paths/{learningPathId}
     * @allow (get) - Anyone can read learning path information.
     * @allow (list) - Anyone can list learning paths.
     * @allow (create) - Only an instructor can create a learning path.
     * @allow (update) - Only the instructor who created the learning path can update it.
     * @allow (delete) - Only the instructor who created the learning path can delete it.
     * @principle Public read, owner-only writes for LearningPaths
     */
    match /learning_paths/{learningPathId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add instructor validation
      allow update: if isSignedIn(); // TODO: Add instructor validation
      allow delete: if isSignedIn(); // TODO: Add instructor validation
    }

    /**
     * @description Rules for instructors.
     * @path /instructors/{instructorId}
     * @allow (get) - Anyone can read instructor information.
     * @allow (list) - Anyone can list instructors.
     * @allow (create) - Only an admin can create an instructor profile.
     * @allow (update) - Only the instructor themselves can update their profile.
     * @allow (delete) - Only an admin can delete an instructor profile.
     * @principle Public read, owner-only writes for Instructors
     */
    match /instructors/{instructorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add admin validation
      allow update: if isOwner(instructorId);
      allow delete: if isSignedIn(); // TODO: Add admin validation
    }

    /**
     * @description Rules for modules within a course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get) - Anyone can read module information.
     * @allow (list) - Anyone can list modules for a course.
     * @allow (create) - Only the instructor who created the course can create a module.
     * @allow (update) - Only the instructor who created the course can update the module.
     * @allow (delete) - Only the instructor who created the course can delete the module.
     * @principle Public read, owner-only writes, parent-child relationship enforced.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
      allow update: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
      allow delete: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
    }

    /**
     * @description Rules for video lessons within a module.
     * @path /courses/{courseId}/modules/{moduleId}/video_lessons/{videoLessonId}
     * @allow (get) - Anyone can read video lesson information.
     * @allow (list) - Anyone can list video lessons for a module.
     * @allow (create) - Only the instructor who created the course can create a video lesson.
     * @allow (update) - Only the instructor who created the course can update the video lesson.
     * @allow (delete) - Only the instructor who created the course can delete the video lesson.
     * @principle Public read, owner-only writes, parent-child relationship enforced.
     */
    match /courses/{courseId}/modules/{moduleId}/video_lessons/{videoLessonId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
      allow update: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
      allow delete: if isSignedIn(); // TODO: Add instructor validation and course ownership validation
    }

    /**
     * @description Rules for comments on a video lesson.
     * @path /courses/{courseId}/modules/{moduleId}/video_lessons/{videoLessonId}/comments/{commentId}
     * @allow (get) - Anyone can read comment information.
     * @allow (list) - Anyone can list comments for a video lesson.
     * @allow (create) - Authenticated users can create comments.
     * @allow (update) - Only the user who created the comment can update it.
     * @allow (delete) - Only the user who created the comment can delete it.
     * @principle Public read, owner-only writes for comments, parent-child relationship enforced.
     */
    match /courses/{courseId}/modules/{moduleId}/video_lessons/{videoLessonId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}