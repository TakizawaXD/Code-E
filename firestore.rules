/**
 * @file Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * preventing unauthorized data access and modification. It does not enforce
 * strict data validation to allow for rapid prototyping.
 *
 * Data Structure:
 * User profiles are stored under the `/users/{userId}` path, with each
 * document representing a single user's public profile information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing all users is disallowed to protect user privacy.
 * - Data validation is minimal in the prototyping phase.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @deny (update) User with ID 'user456' cannot update user 'user123's profile.
     * @deny (delete) User with ID 'user456' cannot delete user 'user123's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

        /**
     * @description Prevents all access to the /comunicacion collection.
     * @path /comunicacion
     * @allow N/A - No access allowed.
     * @deny N/A - All access is denied.
     * @principle Enforces complete denial of access to the /comunicacion collection.
     */
    match /comunicacion {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}