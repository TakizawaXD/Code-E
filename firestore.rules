/**
 * @fileoverview Firestore Security Rules for Kursor Platform - PROTOTYPING MODE.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping and assumes a flexible data shape, but it enforces strict
 * authorization based on user identity.  Data validation is minimized to allow for quick iteration on
 * the data model.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - All write operations require a valid, authenticated user.
 * - Data validation is relaxed to expedite prototyping, but ownership is strictly enforced on all writes.
 *
 * Denormalization for Authorization:
 *   - The user ID is used as the document ID in the `/users` collection to avoid requiring a separate
 *     lookup to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can read their own profile.
     * @allow (create) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can create their own profile.
     * @allow (update) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can update their own profile.
     * @allow (delete) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can delete their own profile.
     * @deny (get) User 'otherUserId' cannot read user '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' profile.
     * @deny (create) User 'otherUserId' cannot create user '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' profile.
     * @deny (update) User 'otherUserId' cannot update user '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' profile.
     * @deny (delete) User 'otherUserId' cannot delete user '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' profile.
     * @principle Enforces user-ownership for all access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }


     /**
      * @description Allow all reads and writes on any collection.  DANGER: FOR PROTOTYPING ONLY.
      * @path /{document=**}
      * @allow (get) Any user can read any document.
      * @allow (list) Any user can list any collection.
      * @allow (create) Any user can create any document.
      * @allow (update) Any user can update any document.
      * @allow (delete) Any user can delete any document.
      * @principle Open access for rapid prototyping; REMOVE IN PRODUCTION.
      */
     match /{document=**} {
       allow read, write: if true;
     }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is from an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID claimed to own the resource.
     * @return {bool} True if the requesting user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

      /**
       * @description Checks if the user is creating their own user document.
       * @param {string} userId The user ID from the path.
       * @return {bool} True if the authenticated user's UID matches the userId and the user is signed in.
       */
    function isSelfCreation(userId) {
       return isSignedIn() && request.auth.uid == userId;
    }


    /**
     * @description Checks if the request is from the existing owner of the resource.
     * @param {string} userId The user ID claimed to own the resource.
     * @return {bool} True if the requesting user's UID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}