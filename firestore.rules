/**
 * @file Firebase Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * and allows public read access to lessons and comments.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible to all users.
 * - /lessons/{lessonId}/comments/{commentId}: Stores comments for lessons. Open reads, owner writes only.
 *
 * Key Security Decisions:
 * - Users can only read data for lessons and their comments.
 * - Users can only create, update, or delete comments if they are the owner.
 * - User profiles are publicy accessible, but only the authenticated user can modify their own profile.
 *
 * Denormalization for Authorization:
 * - The comment documents should ideally contain the user id as the author.
 *
 * Structural Segregation:
 * - There are no private user subcollections. All collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) Any user can read any profile.
     * @allow (create) User with matching ID can create their own profile.
     * @allow (update, delete) User with matching ID can update/delete their own profile.
     * @deny (create) User attempts to create a profile with an ID different from their own.
     * @deny (update, delete) User attempts to update/delete a profile with an ID different from their own.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isExistingOwner(userId) && (request.resource.data.email == resource.data.email);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to lessons and only the author can create, update and delete their own comments.
     * @path /lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) Any user can read lessons.
     * @allow (create) Only the authenticated owner can create a comment with the correct authorId.
     * @allow (update, delete) Only the authenticated owner can update or delete the comment.
     * @deny (create) A user attempts to create a comment with an incorrect authorId.
     * @deny (update, delete) A user attempts to update or delete a comment that they don't own.
     * @principle Enforces owner-only writes for comments.
     */
    match /lessons/{lessonId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}