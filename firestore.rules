rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description This ruleset enforces a strict user-ownership model for user profiles.
     * @dataStructure All user data is stored under the `/users/{userId}` path, with each document representing a user profile.
     * @keySecurityDecisions Users can only read their own profile and only create their own profile.
     *  Users cannot list all profiles. Updates are only permitted if the user is the owner and the correct userId is used.
     * @denormalizationForAuthorization The `userId` is denormalized by being present in both the path and the document `id` field.
     */

    /**
     * @description Manages access to individual user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their profile document at /users/user_abc if the document's 'id' field matches their 'auth.uid'.
     * @allow (get) - Authenticated user 'user_abc' can read their own profile at /users/user_abc.
     * @allow (update) - Authenticated user 'user_abc' can update their own profile at /users/user_abc.
     * @allow (delete) - Authenticated user 'user_abc' can delete their own profile at /users/user_abc.
     * @deny (create) - Authenticated user 'user_abc' cannot create a profile document at /users/user_xyz (mismatched user IDs).
     * @deny (get) - Authenticated user 'user_xyz' cannot read the profile at /users/user_abc.
     * @deny (list) - No user can list all user profiles.
     * @deny (update) - Authenticated user 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny (delete) - Authenticated user 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.  Validates relational integrity between the path and the document's internal 'id' field.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile, enforcing that the userId in the path matches the user's auth ID.
      allow create: if isSignedIn()
                   && isOwner(userId)
                   && request.resource.data.id == userId;

      // Allow a user to read their own profile.
      allow get: if isSignedIn()
                  && isOwner(userId);

      // Prevent listing of all users
      allow list: if false;

      // Allow a user to update their profile, enforcing ownership and ensuring the document exists. The user id cannot be changed.
      allow update: if isSignedIn()
                     && isExistingOwner(userId)
                     && resource.data.id == request.resource.data.id;

      // Allow a user to delete their profile, enforcing ownership and ensuring the document exists.
      allow delete: if isSignedIn()
                     && isExistingOwner(userId);
    }
  }
}