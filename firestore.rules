/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data.  `userId` is the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data in `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read user profiles.
      allow get, list: if true;

      // Only allow creating a profile if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Only allow updates and deletes if the user is signed in and is the owner of the profile.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}