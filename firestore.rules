/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 * Comments under lessons are publicly accessible but cannot be listed without authentication.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profile information for each user.
 *
 * Key Security Decisions:
 * - Users can only read or write their own profile data.
 * - Users are prevented from listing all user profiles.
 * - Comments are only listable by authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can create their own profile.
     * @allow (get, update, delete) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can read/write their own profile.
     * @deny (create) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' cannot create a profile for another user.
     * @deny (get, update, delete) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' cannot read/write another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to comments under lessons.
     * @path /lessons/{lessonId}/comments/{commentId}
     * @allow (get) Anyone can read a specific comment.
     * @allow (list) Authenticated user can list comments.
     * @allow (create, update, delete) No write operations are allowed.
     * @deny (create) No one can create a comment (writes are disabled).
     * @deny (update) No one can update a comment (writes are disabled).
     * @deny (delete) No one can delete a comment (writes are disabled).
     * @principle Allows public read access for comments but restricts listing and write access.
     */
    match /lessons/{lessonId}/comments/{commentId} {
        allow get: if true;
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}