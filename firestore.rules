/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Notifications are stored under `/users/{userId}/notifications`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only list their own notifications.
 * - Public listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - User ownership is determined by matching `request.auth.uid` to the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *   - Request: `auth.uid == 'user123'`, `resource.data.id == 'user123'`
     * @allow (get) User with UID 'user123' can read their own profile.
     *   - Request: `auth.uid == 'user123'`
     * @allow (update) User with UID 'user123' can update their own profile.
     *   - Request: `auth.uid == 'user123'`
     * @allow (delete) User with UID 'user123' can delete their own profile.
     *   - Request: `auth.uid == 'user123'`
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     *   - Request: `auth.uid == 'user123'`, `resource.data.id == 'user456'`
     * @deny (get) User with UID 'user123' cannot read the profile of 'user456'.
     *   - Request: `auth.uid == 'user123'`
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notification documents for a specific user.
     * @path /databases/{database}/documents/users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user123' can create a notification for themselves.
     *   - Request: `auth.uid == 'user123'`
     * @allow (get) User with UID 'user123' can read their own notification.
     *   - Request: `auth.uid == 'user123'`
     * @allow (list) User with UID 'user123' can list their own notifications.
     *   - Request: `auth.uid == 'user123'`
     * @allow (update) User with UID 'user123' can update their own notification.
     *   - Request: `auth.uid == 'user123'`
     * @allow (delete) User with UID 'user123' can delete their own notification.
     *   - Request: `auth.uid == 'user123'`
     * @deny (create) User with UID 'user123' cannot create a notification for 'user456'.
     *   - Request: `auth.uid == 'user123'`
     * @deny (get) User with UID 'user123' cannot read notifications of 'user456'.
     *   - Request: `auth.uid == 'user123'`
     * @principle Restricts access to a user's own notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}