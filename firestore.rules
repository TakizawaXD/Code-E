rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Stores all learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to learning paths.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores all courses.
     * @path /courses/{courseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to courses.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores modules for a specific course.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to course modules.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores lessons for a specific module.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to lessons.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores comments for a specific lesson.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to comments.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete)
     * @deny (list)
     * @principle Enforces document ownership for writes; prevents listing of all users.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && exists(resource);
    }

    /**
     * @description Tracks a user's progress in courses.
     * @path /users/{userId}/progress/{progressId}
     * @allow (get, create, update, delete, list)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/progress/{progressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(resource);
      allow delete: if isOwner(userId) && exists(resource);
    }

    /**
     * @description Stores notifications for a user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, create, update, delete, list)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(resource);
      allow delete: if isOwner(userId) && exists(resource);
    }

    /**
     * @description Stores a user's gamification stats. Should be a single doc.
     * @path /users/{userId}/gamification/{statsId}
     * @allow (get, create, update, delete, list)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/gamification/{statsId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(resource);
      allow delete: if isOwner(userId) && exists(resource);
    }

    /**
     * @description Stores all available badges in the platform.
     * @path /badges/{badgeId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to badges.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores the badges a user has earned.
     * @path /users/{userId}/badges/{userBadgeId}
     * @allow (get, create, update, delete, list)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/badges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && exists(resource);
      allow delete: if isOwner(userId) && exists(resource);
    }

    /**
     * @description Stores all forum discussion threads.
     * @path /forumThreads/{threadId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to forum threads.
     */
    match /forumThreads/{threadId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores all posts within a specific forum thread.
     * @path /forumThreads/{threadId}/posts/{postId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows public read access to forum posts.
     */
    match /forumThreads/{threadId}/posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}