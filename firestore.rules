/**
 * @file Firestore Security Rules for Code-E Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and a public-read, owner-write model for course content.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Learning paths and their related courses and lessons form a hierarchical structure under /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}.
 * - User-specific data (progress, certificates, payments, exam answers) is nested under /users/{userId}.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Read-only collections are made public.
 * - Ownership is validated on create, update, and delete operations.
 * - Relational integrity is enforced to prevent data inconsistencies.
 *
 * Authorization Independence:
 * Path-based ownership is used to avoid `get()` calls in security rules, improving performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the user to read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (list) Always deny listing all users
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read learning paths, but restricts creation, updating, and deletion.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read courses within learning paths, but restricts creation, updating, and deletion.
     * @path /learningPaths/{learningPathId}/courses/{courseId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for courses.
     */
    match /learningPaths/{learningPathId}/courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read lessons within courses, but restricts creation, updating, and deletion.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for lessons.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any signed-in user to create comments, but only the owner can update or delete them.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isExistingOwner(resource.data.userId)
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows public reads with owner-only updates and deletes.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows anyone to read exercises, but restricts creation, updating, and deletion.
     * @path /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for exercises.
     */
    match /learningPaths/{learningPathId}/courses/{courseId}/lessons/{lessonId}/exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows only the user to read, update, or delete their own progress data.
     * @path /users/{userId}/progress/{progressId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @deny (list) Deny listing all progress documents.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user progress.
     */
    match /users/{userId}/progress/{progressId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows only the user to read, update, or delete their own certificates.
     * @path /users/{userId}/certificates/{certificateId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @deny (list) Deny listing all certificates.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user certificates.
     */
    match /users/{userId}/certificates/{certificateId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows only the user to read, update, or delete their own payment information.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @deny (list) Deny listing all payments.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user payments.
     */
    match /users/{userId}/payments/{paymentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read exams within courses, but restricts creation, updating, and deletion.
     * @path /courses/{courseId}/exams/{examId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for exams.
     */
    match /courses/{courseId}/exams/{examId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read exam questions, but restricts creation, updating, and deletion.
     * @path /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for exam questions.
     */
    match /courses/{courseId}/exams/{examId}/examQuestions/{examQuestionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows only the user to read, update, or delete their own exam answers.
     * @path /users/{userId}/userExamAnswers/{userExamAnswerId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @deny (list) Deny listing all exam answers.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user exam answers.
     */
    match /users/{userId}/userExamAnswers/{userExamAnswerId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read courses.
     * @path /courses
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes, as these should be managed by admins.
     * @principle Public read access with restricted writes for courses.
     */
    match /courses {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}