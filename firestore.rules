/**
 * @fileoverview Firestore Security Rules for Code-E platform.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model where users can only
 * read and write their own data, with no public listing of user documents.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only create their profile if they are authenticated and the userId matches their auth UID.
 * - Users can only read, update, and delete their own profile.
 * - Listing all users is explicitly denied.
 * - No public read access is granted.
 *
 * Denormalization for Authorization:
 *  - Not applicable in this simple model; authorization relies solely on `request.auth.uid` matching the `userId` in the path.
 *
 * Structural Segregation:
 *  - All user data is private and stored under the `/users/{userId}` path.  There is no public data in this simple model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and the document exists
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched userId.
     * @allow (get) Authenticated user can read their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);

      /**
       * @description Rules for enrolled courses subcollection.
       * @path /users/{userId}/enrolledCourses/{courseId}
       */
      match /enrolledCourses/{courseId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}