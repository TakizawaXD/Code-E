/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a public read with owner-write model for lessons and progress tracking.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Progress data, nested under users.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing all users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 *  - User progress is nested under the user's document to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user with matching userId accesses their profile.
     * @deny (create) - User attempts to create a profile with a userId that doesn't match their auth.uid.
     * @deny (list) - Listing all users is disallowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);

      // Allow the user to update their own profile, ensuring the user ID cannot be changed.
      allow update: if isOwner(userId) && resource.data.id == userId;

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId) && resource != null;

      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Secure user progress. Users can only read and write their own progress.
     * @path /databases/{database}/documents/users/{userId}/progress/{progressId}
     * @allow (create) - Authenticated user creates their own progress with matching userId.
     * @allow (get, update, delete) - Authenticated user with matching userId accesses their progress.
     * @deny (create) - User attempts to create a progress with a userId that doesn't match their auth.uid.
     * @deny (list) - Listing all progress is disallowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/progress/{progressId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own progress.
      allow create: if isOwner(userId);

      // Allow the user to read their own progress.
      allow get: if isOwner(userId);

      // Allow the user to update their own progress.
      allow update: if isOwner(userId) && resource != null;

      // Allow the user to delete their own progress.
      allow delete: if isOwner(userId) && resource != null;

      // Prevent listing all progress.
      allow list: if isOwner(userId);
    }
    
    /**
     * @description Secure user lessons under user progress. Users can only read and write their own lesson progress.
     * @path /databases/{database}/documents/users/{userId}/progress/{progressId}/lessons/{lessonId}
     * @allow (create) - Authenticated user creates their own lesson progress with matching userId.
     * @allow (get, update, delete) - Authenticated user with matching userId accesses their lesson progress.
     * @deny (create) - User attempts to create a lesson progress with a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/progress/{progressId}/lessons/{lessonId} {
          // Helper function to check if the user is signed in and owns the document.
          function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
          }
    
          // Allow the user to create their own lesson progress.
          allow create: if isOwner(userId);
    
          // Allow the user to read their own lesson progress.
          allow get: if isOwner(userId);
    
          // Allow the user to update their own lesson progress.
          allow update: if isOwner(userId) && resource != null;
    
          // Allow the user to delete their own lesson progress.
          allow delete: if isOwner(userId) && resource != null;
    
          // Prevent listing all lesson progress.
          allow list: if isOwner(userId);
    }
  }
}