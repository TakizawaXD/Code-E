/**
 * @file Firestore Security Rules for Code-E Platform
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data,
 *  while allowing public read access to course and learning path information.
 * @data_structure Data is organized hierarchically with top-level collections for Courses and LearningPaths,
 *  and user-specific data nested under /users/{userId}.
 * @key_security_decisions Users can only access their own profile and progress data. Listing of users is disallowed.
 *  Courses and LearningPaths are publicly readable.
 * @denormalization Not applicable in this version. Future versions should denormalize data to avoid complex rules.
 * @structural_segregation Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to all learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list) Any user can read learning path data.
     * @deny (create, update, delete) No user can create, update, or delete learning paths.
     * @principle Public read access for course catalog.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to all courses.
     * @path /courses/{courseId}
     * @allow (get, list) Any user can read course data.
     * @deny (create, update, delete) No user can create, update, or delete courses.
     * @principle Public read access for course catalog.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to course modules.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list) Any user can read course module data.
     * @deny (create, update, delete) No user can create, update, or delete course modules.
     * @principle Public read access for course catalog.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to lessons.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (get, list) Any user can read lesson data.
     * @deny (create, update, delete) No user can create, update, or delete lessons.
     * @principle Public read access for course catalog.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read and write access to comments, restricted to authenticated users.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
     * @allow (create) An authenticated user can create a comment if the userId matches their auth.uid.
     * @allow (get, list) Any user can read comments.
     * @allow (update, delete) Only the owner of the comment can update or delete it.
     * @deny (create) A user cannot create a comment with a mismatched userId.
     * @deny (update, delete) A non-owner cannot update or delete a comment.
     * @principle Enforces document ownership for comments.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the userId matches their auth.uid.
     * @allow (get) A user can read their own profile.
     * @deny (list) Listing all users is not allowed.
     * @allow (update) A user can update their own profile.
     * @allow (delete) A user can delete their own profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to user progress data.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) A user can create their own progress data if the userId matches their auth.uid.
     * @allow (get, list) A user can read their own progress data.
     * @allow (update) A user can update their own progress data.
     * @allow (delete) A user can delete their own progress data.
     * @deny (create) A user cannot create progress data for another user.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's progress data.
     * @principle Enforces document ownership for user progress.
     */
    match /users/{userId}/progress/{progressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) A user can create their own notification if the userId matches their auth.uid.
     * @allow (get, list) A user can read their own notifications.
     * @allow (update) A user can update their own notifications.
     * @allow (delete) A user can delete their own notifications.
     * @deny (create) A user cannot create notifications for another user.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's notifications.
     * @principle Enforces document ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // ----- Helper Functions -----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}