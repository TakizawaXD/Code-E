/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Users can only create their own profile and userId must match request.auth.uid
 * - Users can only update their own profile.
 * - Listing all users is disallowed for privacy.
 * - There are no global admin roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the `isSignedIn()` helper function.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the `isOwner(userId)` helper function.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines the `isExistingOwner(userId)` helper function.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile: `auth.uid == userId`
     * @allow (create) Authenticated user can create their own profile: `auth.uid == userId` and `request.resource.data.id == userId`
     * @allow (update) Authenticated user can update their own profile: `auth.uid == userId`
     * @deny (get) Authenticated user tries to read another user's profile: `auth.uid != userId`
     * @deny (create) Unauthenticated user tries to create a profile.
     * @deny (create) Authenticated user tries to create a profile with a mismatched userId: `auth.uid != userId`
     * @deny (update) Authenticated user tries to update another user's profile: `auth.uid != userId`
     * @deny (delete) Any user tries to delete a profile (deletion is not allowed).
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

        /**
     * @description Public read only
     * @path /comments
     * @allow (get, list) Everyone can read comments.
     * @deny (create, update, delete) No one can write comments.
     * @principle Public read only
     */
    match /comments {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

  }
}