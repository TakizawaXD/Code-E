/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Each user can only read and write their own profile data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` corresponds to the Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - Users can only create their own profile.
 * - Users can only read, update, and delete their own profile.
 * - Listing all users is not allowed to protect user privacy.
 * - Data validation is relaxed in this prototyping phase to allow rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if the document's 'id' field also equals 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership, validates identity on create, and allows only the owner to modify or delete.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}