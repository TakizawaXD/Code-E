/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, while allowing public read access to certain collections.
 * User data is segregated under the /users/{userId} path.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /users/{userId}/progress/{courseId}/lessons: Stores user-specific progress data for lessons within a course.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Users can only access their own progress data.
 * - The ruleset explicitly denies listing all users.
 *
 * Denormalization for Authorization:
 * The rules assume that documents requiring ownership checks have an `ownerId` field that matches the authenticated user's UID.
 *
 * Structural Segregation:
 * The ruleset uses nested collections under `/users/{userId}` to store private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/write document 'user123'.
     * @allow (create) User with UID 'user123' can create document 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write document 'user123'.
     * @principle Enforces document ownership for writes; allows owner-only access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Do not allow listing all users
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own progress data.
     * @path /users/{userId}/progress/{courseId}/lessons
     * @allow (list) User with UID 'user123' can list documents under /users/user123/progress/course1/lessons.
     * @allow (get, create, update, delete) are not allowed because there are no specific rules set for them, defaults to false.
     * @deny User with UID 'user456' cannot list documents under /users/user123/progress/course1/lessons.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/progress/{courseId}/lessons {
      allow get: if false;
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}