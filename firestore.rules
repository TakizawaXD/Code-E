/**
 * @fileoverview Firestore Security Rules for Kursor Platform
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Users can only create their own profile.
 * - Users can update and delete their own profile data.
 * - Public listing of user profiles is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     *   - Auth: { uid: 'user123' }
     * @allow (create) User with ID 'user456' can create their own profile.
     *   - Auth: { uid: 'user456' }
     *   - Request Data: { id: 'user456', name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (update) User with ID 'user789' can update their own profile.
     *   - Auth: { uid: 'user789' }
     *   - Existing Data: { id: 'user789', name: 'Jane Doe', email: 'jane.doe@example.com', username: 'janedoe', createdAt: '2024-01-01T00:00:00Z' }
     *   - Request Data: { name: 'Jane Smith' }
     * @allow (delete) User with ID 'userABC' can delete their own profile.
     *   - Auth: { uid: 'userABC' }
     *   - Existing Data: { id: 'userABC', name: 'Alice', email: 'alice@example.com', username: 'alice', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     *   - Auth: { uid: 'user123' }
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   - Auth: { uid: 'user123' }
     *   - Request Data: { id: 'user456', name: 'John Doe', email: 'john.doe@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (update) User with ID 'user123' tries to update profile of 'user456'.
     *   - Auth: { uid: 'user123' }
     *   - Existing Data: { id: 'user456', name: 'Jane Doe', email: 'jane.doe@example.com', username: 'janedoe', createdAt: '2024-01-01T00:00:00Z' }
     *   - Request Data: { name: 'Jane Smith' }
     * @deny (delete) User with ID 'user123' tries to delete profile of 'user456'.
     *   - Auth: { uid: 'user123' }
     *   - Existing Data: { id: 'user456', name: 'Alice', email: 'alice@example.com', username: 'alice', createdAt: '2024-01-01T00:00:00Z' }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}