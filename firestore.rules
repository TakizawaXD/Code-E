/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles. Only authenticated users can create their profiles, and only the owner can read or modify their own profile.
 *
 * Data Structure:
 * - All user profiles are stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User profiles are only accessible to the owner. Listing user documents is disallowed to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can create their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (get) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can read their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (update) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can update their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @allow (delete) User '5sHhhuRPF5aoAzJIfmYpVlHW8vB2' can delete their profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (create) User 'attackerId' cannot create a profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (get) User 'attackerId' cannot read the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (update) User 'attackerId' cannot update the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @deny (delete) User 'attackerId' cannot delete the profile at /users/5sHhhuRPF5aoAzJIfmYpVlHW8vB2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}