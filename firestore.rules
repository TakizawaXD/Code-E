/**
 * @fileoverview Firestore Security Rules for the Code-E platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only read or write their own profile data.
 * - Listing of all user profiles is disallowed to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *    - auth: { uid: 'user123' }
     *    - request.resource.data: { id: 'user123', name: 'John Doe', email: 'john@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (get) User with ID 'user123' can read their profile.
     *    - auth: { uid: 'user123' }
     * @allow (update) User with ID 'user123' can update their profile.
     *    - auth: { uid: 'user123' }
     * @allow (delete) User with ID 'user123' can delete their profile.
     *    - auth: { uid: 'user123' }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *    - auth: { uid: 'user456' }
     *    - request.resource.data: { id: 'user123', name: 'John Doe', email: 'john@example.com', username: 'johndoe', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *    - auth: { uid: 'user456' }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/users/$(userId)).data != null;
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Prevents unauthorized listing of comments.
     * @path /databases/{database}/documents/comments
     * @allow (get)  No one, this operation does not exists.
     * @allow (create) No one, this operation does not exists.
     * @allow (update) No one, this operation does not exists.
     * @allow (delete) No one, this operation does not exists.
     * @allow (list)  No one, this operation is disallowed.
     * @deny (list)  Everyone is denied from listing comments, as no permissions are specified for comments.
     * @principle Prevents unauthorized listing of comments.
     */
    match /comments/{commentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Define the isSignedIn function.
    function isSignedIn() {
        return request.auth != null;
    }
  }
}