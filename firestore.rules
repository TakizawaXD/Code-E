/**
 * @file Overview
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Each user can only read and write their own profile data.
 *
 * Data Structure:
 * User profiles are stored under the `/users/{userId}` path, where `{userId}` corresponds to the Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile.
 * - Listing all users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `userId` is part of the path (`/users/{userId}`), so no denormalization is required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different userId in the document.
     * @deny (get) User with UID 'user456' cannot read the profile of user with UID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user with UID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user with UID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}