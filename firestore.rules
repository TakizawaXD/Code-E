/**
 * @fileoverview Firestore Security Rules for Code-E platform.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user-specific data
 * (profiles, progress) and allows public read access for courses and learning paths.
 * Write access is generally restricted to authenticated users, with ownership
 * checks to ensure data integrity.
 *
 * Data Structure:
 * - /learningPaths/{learningPathId}: Publicly readable learning paths.
 * - /courses/{courseId}: Publicly readable course information.
 * - /courses/{courseId}/modules/{moduleId}: Modules within a course.
 * - /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}: Lessons within a module.
 * - /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}: Comments on a lesson.
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/progress/{progressId}: User's course progress, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Public read access to courses and learning paths.
 * - User profiles and progress are only accessible to the respective user.
 * - No listing of all users is allowed.
 *
 * Denormalization for Authorization:
 *  Not applicable in this version.
 *
 * Structural Segregation:
 *  The ruleset uses clear hierarchical separation between public course data and
 *  private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read learning paths.
     * @path /learningPaths/{learningPathId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for learning paths.
     */
    match /learningPaths/{learningPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read courses.
     * @path /courses/{courseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for courses.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read course modules.
     * @path /courses/{courseId}/modules/{moduleId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for course modules.
     */
    match /courses/{courseId}/modules/{moduleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read lessons.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for lessons.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create comments, but only allows modification or deletion by the comment's author.
     * @path /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId}
     * @allow (create) User with valid auth can create a comment.
     * @allow (get, list) Public can view comments.
     * @allow (update, delete) Only the comment's author can modify/delete.
     * @deny (create) if not signed in.
     * @deny (update, delete) if not the author.
     * @principle Users can create comments and only owners can update or delete their comments.
     */
    match /courses/{courseId}/modules/{moduleId}/lessons/{lessonId}/comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(request.resource.data.userId);
        allow delete: if isSignedIn() && isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Allows only the owner to read, update, and delete their own user profile. Allows self-creation.
     * @path /users/{userId}
     * @allow (create) User can create their own profile if the userId matches their auth.
     * @allow (get, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @deny (get, update, delete) Another user cannot access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows only the owner to read, create, update, and delete their own progress documents.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) User can create progress documents under their own user ID.
     * @allow (get, update, delete) User can access and modify their own progress documents.
     * @deny (create) User cannot create progress documents under another user's ID.
     * @deny (get, update, delete) Another user cannot access or modify this user's progress documents.
     * @principle Enforces document ownership for user progress tracking.
     */
    match /users/{userId}/progress/{progressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
         * @description Checks if the user is the owner of an existing document.
         * @param {string} userId The user ID to check against.
         * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
         */
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
  }
}